	1006 자료구조

희소행열:

정렬 tableC에서 하나잡고 행과열을 다뒤져서 비교

최적정렬
-합병정렬
-퀵정렬

-버블 정렬(bubbleSort) _희소행열 정렬할때 응용가능
ex) void bubbleSort(int n, keytype S[]){

  index i,j;

  for(i = n-1; i>=0; i--){	//n-1인 이유는 n은 null값이라서? -배열이라서(칸수)
    for(j=0; j<i; j++){
      if(S[j] > S[j+1]){
        exchange S[j] and S[j+1];
      }
    }
  }
}
ex)
int main(){

  int A[6] = {50.20,10,30,60,40};
  int tmp;

  for(int i=5; i>=0; i++){
    for(int j=0; j<i; j++){
      if(A[j] > A[j+1]){
        tmp = A[j+1[;
        A[j] = A[j+1];
        A[j+1] = tmp;
}}}}}

리스트
ex)
#include<stdio.h>
#define MAX_LIST_SIZE 100
typedef struct{
  int list{MAX_LIST_SIZE];
  int length;
} ArrayListType;

void init(ArrayListype *L){
  L->length = 0;	//L을 찾아가서 0으로
}

int main(){

  ArrayListType a;	//리스트 a선언

  init(&a);	//리스트 초기화

  printf("%d\n", a.length);

  return 0;
}

리스트함수	:리스트 직접 짜보기
-is_empty	//리스트가 비어있는지 비엇으면 1, 아니면0
-is_full		//'' 가득 차잇으면
ex)
//position: 삽입하고자하는위치
//item:삽입하고자하는 자료
void add(ArrayListType *L, int position, element item)
{
  if( !is_full(L) && (position >= 0) && (position <= L-Llength) ){
  int i;
  for(i=(L->length-1); i>-position; i--)
	L->list[i+1]=L->listpi[;
  L->list[position] = item;
  L->length++;
 }
}

delete연산

연결리스트
-순차표현
-연결된 표현:
항목을 노드에 저장
노드: <항목,주소> 쌍_구조체로 구현

연결리스트종류
-단순연결리스트
-원형''
-이중''

구현
노드:
typedef int element;	
typedef struct ListNode{	//화살표
  element data;	//저장값
  struct ListNode *link;	//노드의 주소(구조체자기자신의 주소)
} ListNode;

ListNode *p1;	//노드생성(구조체 p1선언)	p1이 헤드포인터
p1 = ...malloc(...	//에멀록으로 p1에 공간할당

p1 -> data = 10;
p1 -> link = NULL;		

ListNode *p2;
p2=(ListNode*)malloc(sizeof(ListNode));
p2->data = 20;
p2->link = NULL;		//list의 마지막에는 null이 들어가야함
p1->link = p2;	//노드p2생성후 p1링크에 p2를 연결

삽입함수 :직접 짜보기
void insert_node(ListNode **phead, ListNode *p,ListNode *new_node)	//**: 포인터의 포인터(phead포인터의 주소)(이 주소를 바꿀수 잇게하기위해)
ppt참고
1)head가 null인경우:공백리스트에삽입
2)p가 null인 경우: 리스트의 맨 처음에 삽입
3)일반적경우: 리스트중간에 삽입

