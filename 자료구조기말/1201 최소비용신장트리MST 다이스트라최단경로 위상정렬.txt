1201 그래프(사이클이 없으면 트리)

최소비용신장트리 (MST): 네트워크에 있는 모든 정점들을 최소비용으로 연결하는 신장트리
응용: 도로건설, 전기회로, 통신

MST알고리즘
kruskal의 알고리즘
prim의 알고리즘

탐욕적인 방법greedy method
결정때 마다 그 순간 최선을 선택
아래 두개다 greedy알고리즘임

kruskal의 MST알고리즘 :
간선들의 가중치 오름차순으로 정렬
낮은 간선&&사이클을 형성하지 않는 간선 추가(신장트리의 집합에)

union-find알고리즘 : 사이클이 생성되는지 검사하는 알고리즘
각 정점마다 다른 번호를 주고, 간선으로 이은 정점은 같은번호로 
-> 간선으로 이으려고 하는데 번호가 같은 정점이면 사이클이 생성되므로 배제


prim의 MST알고리즘 :
시작정점에서 인접한 정점중에 가중치가 적은 쪽을 연결 반복

위 셋 모두 간선의 개수 = 정점개수 - 1

최단경로: 정점 두개를 연결하는 경로의 간선들의 가중치합이 최소가되게 하는 문제
가중치: 비용,거리,시간등을 나타냄
인접행렬의 2차원배열표현에서 가중치를 입력(간선이없는경우 infinite입력)

다이스트라(dijkstra)의 최단경로 알고리즘
: 시작정점에서 다른 모든 정점까지의 최단 경로를 찾는 알고리즘
: 집합S : 최단경로가 발견된 정점들의 집합
: distance배열: 집합s를 통하여 각 정점까지가는 최단경로의 길이
: 매 단계에서 가장 distance값이 적은 정점을 s에 추가, 후 distance값 갱신
-> 시작정점, 모든 정점들에 번호붙이고 배열로 구현, 시작정점을 집합s에 추가(시작정점표시)
-> 시작정점에 인접한 정점들로 가는 가중치를 배열에 입력(업데이트), 안인접은 무한대표시(infinite)로 업데이트, 배열에서 집합에없는것중 가중치가 가장 낮은 정점을(표시) 집합s에추가
-> 집합에 추가된 정점에 인접한 정점들로 가는 간선들의 가중치합을 업데이트, 그 중 가중치가 가장 낮은 정점을 다시 집합s에추가
-> 반복(가장낮은 가중치가 중복되는 경우 아무거나 골라도 상관x)


위상정렬
각정점들의 선행 순서를 위배하지 않으면서 모든 정점을 나열하는것
ex)선수과목 듣는 순서 0 1 2 3 4 5 이렇게 들으면 위상정렬을 위배하지 않음

사이클이존재하면 위상정렬불가->선행정점이 없는 정점하나가 필요, 시작정점으로 지정
-구현
->선행정점이 없는 정점을(아무거나) 출력후 이 정점에 이어진 정점을 모두 삭제
->반복

